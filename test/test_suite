#!/usr/bin/env bash
#
# ./test_suite
#
# Run test suite for a set of unit tests.


# Usage and script arguments

usage() {
cat << EOF
usage: $(basename "$0")" unitest_file

Run test suite for a set of unit tests.

Each test is runned in the order where you defined it in the file.

unitest_file:

    file where you defined your set of unit tests in respecting
    the appropriate format: 
                 
    Implementation of following abstract functions at beginning of file:

      - init_test_suite: executed before the executution of set of unit tests.
      - clean_test_suite: executed after the executution of set of unit tests.
      - init_test: executed after the executution of set of unit tests.
      - clean_test: executed after the executution of set of unit tests.

    A set of unit tests where wach test should have this format:
  
      test_<name> { 
        ## stdout
        # <optional line(s) with test stdout>  
        ## stderr
        # <optional line(s) with test stderr> 
        ## exit status <exit_status>
        ## location <location>
        <your test>
       }                 
                 
EOF                        
}


if [[ $# -ne 1 ]]; then
  echo "ERROR: '$(basename "$0")', require one argument !"
  exit 1
else
  case "$1" in
    "-h"|"--help")
      usage
      exit 0
      ;;
    *)
      if [[ ! -f "$1" ]]; then
        echo "ERROR: '$(basename "$0")', incorrect argument '$1' !"
        exit 1
      fi
      ;;
  esac
fi


# Global variables

declare -r UNIT_TEST_PATHNAME="$1"
declare -ar FUNCTIONS=(init_test_suite clean_test_suite init_test clean_test)


# Helper test suite

die() {
  >&2 echo "ERROR: $1 !"
  exit 1
}


check_functions() {
  for f in ${FUNCTIONS[*]}; do
    declare -F "$f" > /dev/null || die "'$0', no implementation in $UNIT_TEST_PATHNAME for $f"
  done
}


get_comments() {
  local res=$(cat "${UNIT_TEST_PATHNAME}" | sed -n "/^$1() {$/,/^}$/p" | grep '#' | sed "s/^[ ]*//")
  if [[ -z "$res" ]]; then
    return 1
  fi
  echo "$res"
  return 0
}


get_content() {
  local pattern="$1"
  echo "$2" | grep -q "$pattern" || return 1
  echo "$2" | sed -n "/$pattern/,/##/p" | sed 1d | sed '$d' | sed 's/^# //'
  return 0
}


get_line() {
  local pattern="$1"
  echo "$2" | grep -q "$pattern" || return 1
  echo "$2" | grep "$pattern" | sed "s/$pattern//"
  return 0
}


get_stdout() {
  get_content "^## stdout" "$1"
  return $?
}


get_stderr() {
  get_content "^## stderr" "$1"
  return $?
}


get_exit_status() {
  get_line "^## exit status " "$1"
  return $?
}


get_location() {
  get_line "^## location " "$1"
  return $?
}


clean_test_suite_verbose() {
  local is_ko="${1-false}"
  echo "Cleaning test suite ..."
  clean_test_suite
  echo
  if "$is_ko"; then
    echo "--> Latest unit test KO."
  else
    echo "--> All unit tests OK."
  fi
}


clean_test_verbose() {
  echo
  local unit_test="$1"
  local is_ko="${2-false}"
  echo "Cleaning unit test: ${unit_test} ..."
  clean_test "$unit_test"
  echo
  if "$is_ko"; then
    clean_test_suite_verbose "$is_ko"
  fi
}


# Run unit tests

source "$UNIT_TEST_PATHNAME"

echo "Initializing test suite ..."
check_functions

init_test_suite
echo

trap '[ $? -eq 0 ] || clean_test_suite_verbose true' EXIT

unit_tests=$(typeset -F | sed "s/declare -f //" | grep ^test_)

[[ -z "${unit_tests}" ]] && echo -e "no one unit test\n"

for unit_test in ${unit_tests}; do

  echo "Initializing unit test: ${unit_test} ..."
  init_test "${unit_test}"
  echo

  trap '[ $? -eq 0 ] || clean_test_verbose "${unit_test}" true' EXIT

  echo "Running unit test: ${unit_test} ..."
  stdout=$(tempfile -p "bhist" -s "_${unit_test}.stdout")
  stderr=$(tempfile -p "bhist" -s "_${unit_test}.stderr")
  "${unit_test}" > "${stdout}" 2> "${stderr}"
  exit_status=$?
  location="${PWD}"

  comments=$(get_comments "${unit_test}")
  if [[ $? -ne 0 ]]; then
    echo "no comment found !"
    clean_test_verbose "${unit_test}"
    continue
  fi

  expected_stderr=$(get_stderr "${comments}")
  if [[ $? -eq 0 ]]; then
    echo "--STDERR:"
    echo "- given stderr:"
    stderr=$(cat "${stderr}" | sed 's/^.*line [0-9]*: /bash: /')
    [[ -n "${stderr}" ]] && echo "${stderr}"
    echo "- expected stderr:"
    [[ -n "${expected_stderr}" ]] && echo "${expected_stderr}"
    if [[ "$(echo "${expected_stderr}")" == "$(echo "${stderr}")" ]]; then
      echo "--> stderr OK"
    else
      >&2 echo "--> stderr KO"
      exit 1
    fi
  fi

  expected_stdout=$(get_stdout "${comments}")
  if [[ $? -eq 0 ]]; then
    echo "--STDOUT:"
    echo "- given stdout:"
    cat "$stdout"
    echo "- expected stdout:"
    [[ -n "${expected_stdout}" ]] && echo "${expected_stdout}"
    if [[ "$(echo -n "${expected_stdout}")" == "$(cat "${stdout}")" ]]; then
      echo "--> stdout OK"
    else
      >&2 echo "--> stdout KO"
      exit 1
    fi
  fi

  expected_exit_status=$(get_exit_status "${comments}")
  if [[ $? -eq 0 ]]; then
    echo "--EXIT STATUS:"
    echo "- given exit status: ${exit_status}"
    echo "- expected exit status: ${expected_exit_status}"
    if [[ "${expected_exit_status}" == "${exit_status}" ]]; then
      echo "--> exit status OK"
    else
      >&2 echo "--> exit status KO"
      exit 1
    fi
  fi

  expected_location=$(get_location "${comments}")
  if [[ $? -eq 0 ]]; then
    echo "--LOCATION:"
    echo "- given location: ${location}"
    echo "- expected location: ${expected_location}"
    if [[ "${expected_location}" == "${location}" ]]; then
      echo "--> location OK"
    else
      >&2 echo "--> location KO"
      exit 1
    fi
  fi

  clean_test_verbose "${unit_test}"

done

clean_test_suite_verbose
